function UPDATE_DOT () {

  # This function makes a backup of an existing
  # file and moves a new copy (with .new extension)
  # in place.
  # Example: to update .bash_aliases,
  # copy .bash_aliases -> .bash_aliases.new
  # and make changes, then run UPDATE_DOT .bash_aliases
  #
  # The script will make sure a backup exists (.bash_aliases.bak)
  # for the old file, then will remove and replace it
  # by moving .bash_aliases.new -> .bash_aliases

  # Check if $1.new exists before doing anything
  if [[ -f $1 ]]; then
    if [[ -f $1.new ]]; then
      # Check if $1.bak exists already
      if [[ -f $1.bak ]]; then
        # Keep a temporary copy of the backup, just in case
        echo ""
        echo "Creating temporary copy of "$1".bak"
        mv $1.bak $1.bak_save
        # Create new $1.bak file
        echo ""
        echo "Creating backup of "$1
        mv $1 $1.bak
    
      elif [[ ! -f $1.bak ]]; then
        echo ""
        echo "Creating "$1".bak"
        mv $1 $1.bak
      fi

      echo ""
      echo "Updating "$1
      mv $1.new $1

      # Make sure new .bak exists before deleting temporary save
      if [[ -f $1.bak ]]; then
        if [[ -f $1.bak_save ]]; then
          echo ""
          echo "Cleaning up"
          rm $1.bak_save
        fi

      elif [[ ! -f $1.bak ]]; then
        if [[ -f $1.bak_save ]]; then
          echo ""
          echo "Creating "$1.bak
          mv $1.bak_save $1.bak
        elif [[ ! -f $1.bak_save ]]; then
          echo ""
          echo $1.bak_save" does not exist. Finishing."
        fi
      fi

    elif [[ ! -f $1.new ]]; then
      echo ""
      echo "Could not find "$1".new"
      echo "Did you name the file properly?"
      echo ""
    fi

  elif [[ ! -f $1 ]]; then
    echo ""
    echo "File: $1 not found. Skipping rest of operations."
    echo ""
  fi

}

function GET_DIRSIZE () {

  du -hs $1

}

function CHECK_DISKSPACE () {

  df -H $1

}

function extract () {

if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)
        tar xjvf $1
      ;;
      *.tar.gz)
        tar xzvf $1
      ;;
      *.bz2)
        bunzip2 $1
      ;;
      *.rar)
        rar x $1
      ;;
      *.gz)
        gunzip $1
      ;;
      *.tar)
        tar xvf $1
      ;;
      *.tbz2)
        tar xjvf $1
      ;;
      *.tgz)
        tar xzvf $1
      ;;
      *.zip)
        unzip $1
      ;;
      *.Z)
        uncompress $1
      ;;
      *.7z)
        7z x $1
      ;;
      *.tar.xz)
        tar -xf $1
      ;;
      *)
        echo "'$1' cannot be extracted via extract()"
      ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi

}

function AUTO_GIT_CHECKOUT () {

  BRANCH=${1:-"master"}

  echo ""
  echo "Switching active branch to $BRANCH"
  echo ""
  git checkout $BRANCH

  echo ""
  echo "Run git fetch on $BRANCH"
  echo ""
  git fetch

  echo ""
  echo "Run git pull on $BRANCH"
  echo ""
  git pull
  
  echo ""
  echo "Done."
  echo ""

}

function CONDA_ANSIBLE_CONVERT () {

  conda activate ansible && ansible-playbook "$@" && conda deactivate

}
