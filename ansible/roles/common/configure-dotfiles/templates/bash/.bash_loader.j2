#################################
# I'm tired of keeping a bunch of different
# copies of .bash_aliases and .bash_aliases_<distro>_overrides
# files, and I always forget to source files in my .bashrc
# and .bash_aliases_<distro>_overrides.
#
# This file is also useful for setting
# system defaults, like the $EDITOR value.
#
# Instead, I just source this file in my .bash_aliases,
# which I will keep very lean and source this at the bottom.
#
# When setting up .bash_* files on a host, I'll only have to update
# this file to have the whole environment source properly.
#
# I'm sure at some point I'll update this description to make more sense...
#
# How to use:
# 
# Change some defaults, if you want, in the DEFAULT VARIABLES section below.
# These will be used throughout the file, so you set them at the top so you only
# have to change it once.
#
# Put this at the bottom of your .bash_aliases file (or .bashrc, which is probably better):
#
# if [[ -f .bash_dots_loader ]]; then
#   . ~/.bash_dots_loader
# fi
#################################

####################
# DEFAULT VARIABLES
####################

# Default terminal editor to use, if installed
DEFAULT_EDITOR="nvim"
# Fallback editor if
FALLBACK_EDITOR="nano"
## Array with bash_alias_OS_overrides
declare -a HOST_OS=( "ubuntu" "debian" "fedora" )
## Array with files to source, if they exist
declare -a SRC_FILES=( ".bash_local_override" ".bash_functions")

# Choose editor, defaults to nvim if installed
if [ -x /usr/bin/$DEFAULT_EDITOR ]; then
  export EDITOR=$DEFAULT_EDITOR
else
  export EDITOR=$FALLBACK_EDITOR
fi

# Set $TERM env
export TERM=tmux-256color

# Check for and source files in SRC_FILES array 
for SRC_FILE in "${SRC_FILES[@]}"
do
  if [[ -f ~/$SRC_FILE ]]; then
    . ~/$SRC_FILE
  fi
done

# Check for and source OS alias overrides
for OS in "${HOST_OS[@]}"
do
  if [[ -f ~/.bash_aliases_$OS_override ]]; then
    . ~/.bash_aliases_$OS_override
  fi
done

## Bash

# Autocomplete from history
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

## Docker

# Tell Docker-Compose to use Docker build engine and BUILDKIT
export COMPOSE_DOCKER_CLI_BUILD=1
export DOCKER_BUILDKIT=1

## Python

if [[ -f ~/.local/bin/pipx ]]; then
  # Source pipx completions
  eval "$(register-python-argcomplete pipx)"
fi

##
# Aliases
#
# These aliases will only be sourced if this file is. Some
# of them are dependent on functions in the .bash_functions
# file, and this file will be sure that file exists.
##

# Function aliases, only set if .bash_functions exists
if [[ -f ~/.bash_functions ]]; then
  # I don't know why, but this loop only works if I source .bash_functions here
  . ~/.bash_functions

  # Create aliases for function names in bash_functions
  alias dotupdate='UPDATE_DOT $1'
  alias updatedot='UPDATE_DOT $1'
  alias dirsize='GET_DIRSIZE $1'
  alias checkdiskspace='CHECK_DISKSPACE $1'
  alias autocheckout='AUTO_GIT_CHECKOUT $1'
  alias ap="CONDA_ANSIBLE_CONVERT $@"
fi

# Add /usr/local/bin to PATH
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
